
package com.scta;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

import javax.swing.JOptionPane;


/**
 *
 * @author mumanoha
 */
public class scta_data_creator_input_screen extends javax.swing.JFrame {

    /** Creates new form scta_data_creator_input_screen */
    public scta_data_creator_input_screen() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jFileChooser1 = new javax.swing.JFileChooser();
        textInput = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        emailID = new javax.swing.JTextField();
        csvLoc = new javax.swing.JTextField();
        okBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter your Oracle Email ID:");

        jLabel2.setText("Enter your CSV file Location:");

        okBtn.setText("Submit");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout textInputLayout = new javax.swing.GroupLayout(textInput);
        textInput.setLayout(textInputLayout);
        textInputLayout.setHorizontalGroup(
            textInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textInputLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(textInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(textInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(okBtn)
                    .addGroup(textInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(emailID)
                        .addComponent(csvLoc, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        textInputLayout.setVerticalGroup(
            textInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(textInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(emailID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(textInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(csvLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(okBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }//GEN-END:initComponents

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        try {
            FileWriter writer = new FileWriter("scta-upload-data.txt", true);
            String email_ID = emailID.getText();
            String csvFile = csvLoc.getText();
            System.out.println("Email:" + email_ID + "File Location:" + csvFile);
            Scanner scanner = new Scanner(new File(csvFile));
            while (scanner.hasNext()) {
                List<String> line = parseLine(scanner.nextLine());
                /*System.out.println(line.get(0));
                System.out.println(line.get(1));
                System.out.println(line.get(2));
                System.out.println(line.get(3));
                System.out.println(line.get(4));
                System.out.println(line.get(5));
                System.out.println(line.get(6));*/

                Subject = line.get(0);
                StartDate = line.get(1);
                StartTime = line.get(2);
                EndTime = line.get(4);
                Categories = line.get(6);
                //System.out.println(StartTime);
                //System.out.println(EndTime);
                if (Categories.isEmpty()) {
                    //System.out.println("It's empty Categories"+Categories);
                } else if (Categories.contains("Holiday")) {

                } else {
                    String formattedSubject = "CLOUD - " + Subject;
                    //System.out.println(formattedSubject);

                    String originalStringFormat = "MM/dd/yyyy";
                    String desiredStringFormat = "dd-MMM-yyyy";
                    SimpleDateFormat readingFormat = new SimpleDateFormat(originalStringFormat);
                    SimpleDateFormat outputFormat = new SimpleDateFormat(desiredStringFormat);
                    try {
                        Date date = readingFormat.parse(StartDate);
                        formattedStartDate = outputFormat.format(date);
                        //System.out.println(","+formattedStartDate);
                    } catch (ParseException e) {

                        e.printStackTrace();
                    }


                    try {
                        formattedTime = getDiffTime(StartTime, EndTime);
                        //System.out.println(formattedTime);
                    } catch (ParseException e) {
                    }

                    String formattedCategories;
                    if (Categories.contains("customer meeting")) {
                        formattedCategories = "Customer Meeting";
                        //System.out.println(formattedCategories);
                    } else if (Categories == "") {
                        formattedCategories = "";
                        //System.out.println(Categories);
                    } else {
                        formattedCategories = Categories;
                        //System.out.println(Categories);
                    }

                    if (Categories.contains("Planning - Territory") ||
                        Categories.contains("Training/Personal Development") || Categories.contains("Event/Seminar") ||
                        Categories.contains("Internal Meeting") || Categories.contains("Time Off (Any)") ||
                        Categories.contains("Training Delivery") || Categories.contains("Travel")) {
                        OpportunityID = "";
                    } else {
                        OpportunityID = "300001021988762";
                    }
                    System.out.println("MUTHUKRISHNAN.MANOHARAN@ORACLE.COM," + formattedCategories + "," +
                                       formattedStartDate + "," + formattedTime + ",," + OpportunityID + ",,,," +
                                       formattedSubject);
                    writer.write(email_ID + "," + formattedCategories + "," + formattedStartDate + "," + formattedTime +
                                 ",," + OpportunityID + ",,,," + formattedSubject);
                    writer.write("\r\n");
                }
            }
            scanner.close();
            writer.close();
            JOptionPane jo = new JOptionPane();
        JOptionPane.showMessageDialog(jo, "scta data created successfully!!");
        } catch (IOException e) {
            JOptionPane jo = new JOptionPane();
            JOptionPane.showMessageDialog(jo, "scta data creation failed!!");
        }
    }//GEN-LAST:event_okBtnActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField csvLoc;
    private javax.swing.JTextField emailID;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton okBtn;
    private javax.swing.JPanel textInput;
    // End of variables declaration//GEN-END:variables

    /**
     * Custom Code to read CSV
     */
    public static final String delimiter = ",";
    private static Object formattedStartDate;
    private static Object formattedTime;
    public static String Subject;
    public static String StartDate;
    public static String StartTime;
    public static String EndTime;
    public static String Categories;
    public static String OpportunityID;

    private static final char DEFAULT_SEPARATOR = ',';
    private static final char DEFAULT_QUOTE = '"';

    public static List<String> parseLine(String cvsLine) {
        return parseLine(cvsLine, DEFAULT_SEPARATOR, DEFAULT_QUOTE);
    }

    public static List<String> parseLine(String cvsLine, char separators) {
        return parseLine(cvsLine, separators, DEFAULT_QUOTE);
    }

    public static List<String> parseLine(String cvsLine, char separators, char customQuote) {

        List<String> result = new ArrayList<>();

        //if empty, return!
        if (cvsLine == null && cvsLine.isEmpty()) {
            return result;
        }

        if (customQuote == ' ') {
            customQuote = DEFAULT_QUOTE;
        }

        if (separators == ' ') {
            separators = DEFAULT_SEPARATOR;
        }

        StringBuffer curVal = new StringBuffer();
        boolean inQuotes = false;
        boolean startCollectChar = false;
        boolean doubleQuotesInColumn = false;

        char[] chars = cvsLine.toCharArray();

        for (char ch : chars) {

            if (inQuotes) {
                startCollectChar = true;
                if (ch == customQuote) {
                    inQuotes = false;
                    doubleQuotesInColumn = false;
                } else {

                    //Fixed : allow "" in custom quote enclosed
                    if (ch == '\"') {
                        if (!doubleQuotesInColumn) {
                            curVal.append(ch);
                            doubleQuotesInColumn = true;
                        }
                    } else {
                        curVal.append(ch);
                    }

                }
            } else {
                if (ch == customQuote) {

                    inQuotes = true;

                    //Fixed : allow "" in empty quote enclosed
                    if (chars[0] != '"' && customQuote == '\"') {
                        curVal.append('"');
                    }

                    //double quotes in column will hit this!
                    if (startCollectChar) {
                        curVal.append('"');
                    }

                } else if (ch == separators) {

                    result.add(curVal.toString());

                    curVal = new StringBuffer();
                    startCollectChar = false;

                } else if (ch == '\r') {
                    //ignore LF characters
                    continue;
                } else if (ch == '\n') {
                    //the end, break!
                    break;
                } else {
                    curVal.append(ch);
                }
            }

        }

        result.add(curVal.toString());

        return result;
    }

    public static String getDiffTime(String StartTime, String EndTime) throws ParseException {
        String timediffString;
        SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
        Date date1;
        date1 = format.parse(StartTime);
        Date date2 = format.parse(EndTime);
        long difference1 = ((date2.getTime() - date1.getTime()) / 1000) / 60;
        long difference = date2.getTime() - date1.getTime();
        long diffSeconds = difference / 1000 % 60;
        long diffMinutes = difference / (60 * 1000) % 60;
        long diffHours = difference / (60 * 60 * 1000) % 24;
        long diffDays = difference / (24 * 60 * 60 * 1000);
        /*System.out.print(diffDays + " days, ");
                System.out.print(diffHours + " hours, ");
                System.out.print(diffMinutes + " minutes, ");
                System.out.print(diffSeconds + " seconds.");*/
        if (difference1 == 60) {
            timediffString = "1.0";
            //System.out.println(timediffString);
        } else if (difference1 == 30) {
            timediffString = "0.5";
            //System.out.println(timediffString);
        } else {
            timediffString = "0";
            //System.out.println(timediffString);
        }

        return timediffString;
    }
}

